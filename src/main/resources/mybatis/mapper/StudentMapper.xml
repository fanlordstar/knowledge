<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 采用mapper代理的方式，namespace是接口的全路径,
     mapper.java接口中的方法名和mapper.xml中statement的id一致
     mapper.java接口中的方法输入参数类型和mapper.xml中statement的parameterType指定的类型一致
     mapper.java接口中的方法返回值类型和mapper.xml中statement的resultType指定的类型一致
     -->
<mapper namespace="org.lordstar.learning.mybatis.dao.StudentDao">

    <!--如果查询出来的列名和POJO的属性名不一致，可以使用resultMap进行重新映射-->
    <!--resultMap是将列名和POJO的属性进行映射-->
    <!--type最终被映射的POJO对象-->
    <!--id是对resultMap的命名-->
    <resultMap id="studentResultMap" type="student">
        <!--id表示查询结果集中的唯一标识， column：查询出来的列名， property：POJO中的属性名-->
        <id column="_id" property="id" javaType="int"/>
        <!--result对普通列的定义-->
        <result column="_age" property="age" javaType="int"/>
    </resultMap>

    <!--resultMap如果在其他mapper中定义，前面要加namespace-->
    <select id="findStudentResultMap" resultMap="studentResultMap">
        select id _id, age _age from t_student
    </select>
    

    <select id="findStudentById" parameterType="int" resultType="org.lordstar.learning.mybatis.javabean.Student">
        select * from t_student where id=#{id}
    </select>

    <select id="findStudnetByAge" parameterType="int" resultType="org.lordstar.learning.mybatis.javabean.Student">
        select * from t_student where age=#{age}
    </select>

    <insert id="insertStudent" parameterType="org.lordstar.learning.mybatis.javabean.Student">
        insert into t_student (
            name,
            sex,
            age,
            classNo,
            homeTown
        ) values (
            #{name},
            #{sex},
            #{age},
            #{classNo},
            #{homeTown}
        )
    </insert>

    <delete id="deleteStudent" parameterType="int">
        delete from t_student where id=#{id}
    </delete>

    <!-- 这里注意resultType还是POJO类型 -->
    <select id="findAllStudent" resultType="student">
        select * from t_student
    </select>

    <!--对于map作为参数的时候，使用#{key}获取-->
    <select id="findStudentByMap" parameterType="java.util.Map"
            resultType="student">
        select * from t_student where id=#{id} and age=#{age}
    </select>

    <!--综合查询-->
    <!--包装类属性.属性名 取出包装类属性的属性-->
    <!--${}占位符，如果为简单类型，只能填value-->
    <select id="findStudentList" parameterType="userqueryvo" resultType="studentcustom">
        select * from t_student where t_student.id=#{student.id} and t_student.name like '%${student.name}%'
    </select>

    <!--使用resultType作为输出映射，只有列名和POJO的属性名一致，该列才会映射成功-->
    <!--如果查询出来的列名和POJO属性名全部不一致，就不会创建POJO对象，-->
    <!--如果查询出来的列名和POJO属性名有一列相同，就会创建POJO对象，-->
    <select id="findAllStudentResultType" resultType="student">
        select id id_, name name_, age age_ from t_student;
    </select>

    <!--查询出来的结果集只有一列且一行，可以使用简单类型进行输出映射-->
    <select id="findStudentCount" resultType="int">
        select count(*) from t_student
    </select>

    <!--输出POJO和POJO列表-->
    <!--不管输出POJO单个对象还是输出POJO列表，在mapper.xml中resultType指定的类型是一样的，
    在mapper.java中指定的方法返回值类型不一样-->

    <!--输出为map的时候，列名是key，值是value，输出的就是一个List<Map>-->
    <select id="findAllStudentMap" resultType="java.util.Map">
        select * from t_student;
    </select>

</mapper>